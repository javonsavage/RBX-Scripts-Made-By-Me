local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

local Aiming = false

getgenv().TB = true

local PlayerCharacters = {}
local Ignore = {}

local function IsVisible(Pos)
	local MouseScreenPos = UserInputService:GetMouseLocation()
	local MouseOrigin = Camera:ViewportPointToRay(MouseScreenPos.X, MouseScreenPos.Y)

	local RCP = RaycastParams.new()
	RCP.FilterDescendantsInstances = Ignore
	RCP.FilterType = Enum.RaycastFilterType.Exclude
	RCP.IgnoreWater = true
	RCP.RespectCanCollide = true

	local Result = Workspace:Raycast(MouseOrigin.Origin, Pos - MouseOrigin.Origin, RCP)
	return not Result
end

local function GetMouseTarget()
	local MouseScreenPos = UserInputService:GetMouseLocation()
	local MouseRay = Camera:ViewportPointToRay(MouseScreenPos.X, MouseScreenPos.Y)

	local RCP = RaycastParams.new()
	RCP.FilterDescendantsInstances = PlayerCharacters
	RCP.FilterType = Enum.RaycastFilterType.Whitelist
	RCP.IgnoreWater = true
	RCP.RespectCanCollide = false

	local Result = Workspace:Raycast(MouseRay.Origin, MouseRay.Direction * (10 ^ 9), RCP)

	if Result then
		local HitPosition = Result.Position
		return IsVisible(HitPosition)
	end

	return nil
end

local function onCharacterAdded(Character)
	table.insert(PlayerCharacters, Character)
	table.insert(Ignore, Character)
end

local function onCharacterRemoved(Character)
	if table.find(PlayerCharacters, Character) then
		local CharacterFound = table.find(PlayerCharacters, Character)
		table.remove(PlayerCharacters, CharacterFound)
	end
	if table.find(Ignore, Character) then
		local CharacterFound = table.find(PlayerCharacters, Character)
		table.remove(Ignore, CharacterFound)
	end
end

local function LocalCharacterAdded(Character)
	if table.find(Ignore, Character) then
		local CharacterFound = table.find(Ignore, Character)
		table.remove(Ignore, CharacterFound)
	end
end

local function LocalCharacterRemoved(Character)
	if table.find(Ignore, Character) then
		local CharacterFound = table.find(Ignore, Character)
		table.remove(Ignore, CharacterFound)
	end
end

local function CameraChanged()
	if not table.find(Ignore, Workspace.CurrentCamera) then
		table.insert(Ignore, Workspace.CurrentCamera)
	else
		local Camera = table.find(Ignore, Workspace.CurrentCamera)
		table.remove(Ignore, Camera)
	end
end

local function Shoot()
	local Target = GetMouseTarget()
	if Target and Aiming then
		mouse1press()
		task.wait()
		mouse1release()
	end
end

for i, player in ipairs(Players:GetPlayers()) do
	if player == LocalPlayer then
		table.insert(Ignore, LocalPlayer.Character)
		continue
	end
	player.CharacterAdded:Connect(onCharacterAdded)
	player.CharacterRemoving:Connect(onCharacterRemoved)
	if player.Character then
		table.insert(PlayerCharacters, player.Character)
		table.insert(Ignore, player.Character)
	end
end

LocalPlayer.CharacterAdded:Connect(LocalCharacterAdded)

LocalPlayer.CharacterRemoving:Connect(LocalCharacterRemoved)

Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(CameraChanged)

Players.PlayerAdded:Connect(function(player)
	if player ~= LocalPlayer then
		player.CharacterAdded:Connect(onCharacterAdded)
		player.CharacterRemoving:Connect(onCharacterRemoved)
	end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		Aiming = true
	end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessedEvent)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		Aiming = false
	end
end)

if TB then
	coroutine.wrap(function()
		while TB do
			Shoot()
			task.wait()
		end
	end)()
end
